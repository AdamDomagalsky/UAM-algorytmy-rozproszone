<sprawozdanie przedmiot="ALR" temat="A">
<imie_nazwisko>Dawid KÄ™dzierski</imie_nazwisko>
<nr_indeksu>407231</nr_indeksu>
<liczba_pkt>5</liczba_pkt>
<z>-1</z>
<z>0</z>
<z>1</z>
<z>1a</z>
<z>8</z>
</sprawozdanie>

Zadanie -1 -------------------------------------

Output dla events03.tcl:

0: aaaaaaaaa
1: aaaaaaaaa
2: aaaaaaaaa
0: bbbbbbbbb
1: bbbbbbbbb
2: bbbbbbbbb

Output dla events03a.tcl:

#% 0 3 2 1
#% 0 2 3 1
#% 0 3 1 2
#% 0 2 1 3
#% 0 1 3 2
#% 0 1 2 3

Zadanie 0 -------------------------------------

Output:

0: ,
1: 0,
2: ,
3: ,
4: ,
0: ,
1: ,
2: 1,
3: ,
4: ,
0: ,
1: ,
2: ,
3: 2,
4: ,
0: ,
1: ,
2: ,
3: ,
4: 3,
0: 4,
1: ,
2: ,
3: ,
4: ,
0: ,
1: 5,
2: ,
3: ,
4: ,
0: ,
1: ,
2: 6,
3: ,
4: ,
0: ,
1: ,
2: ,
3: 7,
4: ,
0: ,
1: ,
2: ,
3: ,
4: 8,

Zadanie 1 -------------------------------------

Kod programu:

load ./q3.dll

source symul_lib.tcl;

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}

fiber create $liczbaWierz {
	set lider ?;
	kom0_wyslij $id;
	fiber yield;
	while {$run} {
		if {$kom1!=""} {
			set x $kom1;
			if {$lider==1} {

			} elseif {$x==0} {
				kom0_wyslij $x;
				set lider 0;
			} elseif {$x>$id} {
				kom0_wyslij $x;
			} elseif {$x==$id} {
				set lider 1;
				kom0_wyslij 0;
			} elseif {$x < $id} {

			}
		}
		fiber yield;
	}
}

Inicjalizacja;

proc wizualizacja {} {
  fiber_iterate {_puts "$id: $lider, $kom1"}
}

if 0 {
set_run 0; fiber yield; runda; set_run 1; fiber delete
  # usuwanie fiberow
set_run 0; fiber yield; runda; set_run 1; fiber restart
  # restart kodu fiberow
fiber error
  # wyswietla stan fiberow ({}, ended, error)
}

fiber yield; runda; wizualizacja

Output:

0: ?, 1
1: ?, 2
2: ?, 3
3: ?, 4
4: ?, 0
0: ?, 2
1: ?, 3
2: ?, 4
3: ?, 0
4: 0, 1
0: ?, 3
1: ?, 4
2: ?, 0
3: 0,
4: 0, 2
0: ?, 4
1: ?, 0
2: 0,
3: 0,
4: 0, 3
0: ?, 0
1: 0,
2: 0,
3: 0,
4: 0, 4
0: 0,
1: 0,
2: 0,
3: 0, 0
4: 1, 0
0: 0,
1: 0,
2: 0, 0
3: 0,
4: 1,
0: 0,
1: 0, 0
2: 0,
3: 0,
4: 1,

Zadanie 1a -------------------------------------

Kod programu:

load ./q3.dll

source symul_lib.tcl;

set liczbaWierz 5
set sasiedzi(0) {4 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 0}

fiber create $liczbaWierz {
	set lider ?;
	kom0_wyslij $id;
	kom1_wyslij $id;
	fiber yield;
	while {$run} {
		set x0 $kom0;
		set x1 $kom1;

		if {$kom1!="" && $kom0!=""} {
			set x ?;
			if {$kom0 > $kom1} {
				set x $kom0;
				if {$lider==1} {

				} elseif {$x==0} {
					kom1_wyslij 0;
					set lider 0;
				} elseif {$x>$id} {
					kom1_wyslij $x;
				} elseif {$x==$id} {
					set lider 1;
					kom0_wyslij 0;
					kom1_wyslij 0;
				} elseif {$x < $id} {

				}
				fiber yield;
			} else {
				set x $kom1;
				if {$lider==1} {

				} elseif {$x==0} {
					kom0_wyslij $x;
					set lider 0;
				} elseif {$x>$id} {
					kom0_wyslij $x;
				} elseif {$x==$id} {
					set lider 1;
					kom0_wyslij 0;
					kom1_wyslij 0;
				} elseif {$x < $id} {

				}
				fiber yield;
			}
		} elseif {$kom0!=""} {
			set x $kom0;
			if {$lider==1} {

			} elseif {$x==0} {
				kom1_wyslij 0;
				set lider 0;
			} elseif {$x>$id} {
				kom1_wyslij $x;
			} elseif {$x==$id} {
				set lider 1;
				kom0_wyslij 0;
				kom1_wyslij 0;
			} elseif {$x < $id} {

			}
			fiber yield;
		} else {
			set x $kom1;
			if {$lider==1} {

			} elseif {$x==0} {
				kom0_wyslij $x;
				set lider 0;
			} elseif {$x>$id} {
				kom0_wyslij $x;
			} elseif {$x==$id} {
				set lider 1;
				kom0_wyslij 0;
				kom1_wyslij 0;
			} elseif {$x < $id} {

			}
			fiber yield;
		}
	}
}

Inicjalizacja;

proc wizualizacja {} {
  fiber_iterate {_puts "$id: $lider, $kom0, $kom1"}
}

if 0 {
set_run 0; fiber yield; runda; set_run 1; fiber delete
  # usuwanie fiberow
set_run 0; fiber yield; runda; set_run 1; fiber restart
  # restart kodu fiberow
fiber error
  # wyswietla stan fiberow ({}, ended, error)
}

fiber yield; runda; wizualizacja

Output:

0: ?, 4, 1
1: ?, 0, 2
2: ?, 1, 3
3: ?, 2, 4
4: ?, 3, 0
0: ?, , 2
1: ?, 4, 3
2: ?, , 4
3: ?, ,
4: ?, ,
0: ?, ,
1: ?, , 4
2: ?, 4,
3: ?, ,
4: ?, , 2
0: ?, , 4
1: ?, ,
2: ?, ,
3: ?, 4,
4: ?, ,
0: ?, ,
1: ?, ,
2: ?, ,
3: ?, ,
4: ?, 4, 4
0: ?, 0,
1: ?, ,
2: ?, ,
3: ?, , 0
4: 1, ,
0: 0, ,
1: ?, 0,
2: ?, , 0
3: 0, ,
4: 1, ,
0: 0, ,
1: 0, , 0
2: 0, 0,
3: 0, ,
4: 1, ,
0: 0, , 0
1: 0, ,
2: 0, ,
3: 0, 0,
4: 1, ,
0: 0, ,
1: 0, ,
2: 0, ,
3: 0, ,
4: 1, 0, 0
0: 0, ,
1: 0, ,
2: 0, ,
3: 0, ,
4: 1, ,
0: 0, ,
1: 0, ,
2: 0, ,
3: 0, ,
4: 1, ,
0: 0, ,
1: 0, ,
2: 0, ,
3: 0, ,
4: 1, ,

Zadanie 8 -------------------------------------

Kod programu:

source symul_lib.tcl;
set liczbaWierz 6
set sasiedzi(0) {5 1}
set sasiedzi(1) {0 2}
set sasiedzi(2) {1 3}
set sasiedzi(3) {2 4}
set sasiedzi(4) {3 5}
set sasiedzi(5) {4 0}

fiber create $liczbaWierz {
  set suma $id_los
  set licz [expr $liczbaWierz - 1]
  set wynik ""
  kom1_wyslij $suma
  fiber yield;
  while {$run} {
    if {$kom0!="" && $wynik!="end"} {
      if {$licz>0} {
	    set k $kom0
        set suma [expr $id_los + $k]
		set licz [expr $licz - 1]
		kom1_wyslij $suma
      } else {
		set wynik "end"
	  }
    }
    fiber yield;
  }
}

Inicjalizacja;

proc wizualizacja {} {
  fiber_iterate {_puts "$id: $id_los, suma: $suma, $licz, $wynik"}
}

fiber yield; runda; wizualizacja


Output:

0: 251, suma: 251, 5,
1: 866, suma: 866, 5,
2: 424, suma: 424, 5,
3: 432, suma: 432, 5,
4: 722, suma: 722, 5,
5: 917, suma: 917, 5,
0: 251, suma: 1168, 4,
1: 866, suma: 1117, 4,
2: 424, suma: 1290, 4,
3: 432, suma: 856, 4,
4: 722, suma: 1154, 4,
5: 917, suma: 1639, 4,
0: 251, suma: 1890, 3,
1: 866, suma: 2034, 3,
2: 424, suma: 1541, 3,
3: 432, suma: 1722, 3,
4: 722, suma: 1578, 3,
5: 917, suma: 2071, 3,
0: 251, suma: 2322, 2,
1: 866, suma: 2756, 2,
2: 424, suma: 2458, 2,
3: 432, suma: 1973, 2,
4: 722, suma: 2444, 2,
5: 917, suma: 2495, 2,
0: 251, suma: 2746, 1,
1: 866, suma: 3188, 1,
2: 424, suma: 3180, 1,
3: 432, suma: 2890, 1,
4: 722, suma: 2695, 1,
5: 917, suma: 3361, 1,
0: 251, suma: 3612, 0,
1: 866, suma: 3612, 0,
2: 424, suma: 3612, 0,
3: 432, suma: 3612, 0,
4: 722, suma: 3612, 0,
5: 917, suma: 3612, 0,
0: 251, suma: 3612, 0, end
1: 866, suma: 3612, 0, end
2: 424, suma: 3612, 0, end
3: 432, suma: 3612, 0, end
4: 722, suma: 3612, 0, end
5: 917, suma: 3612, 0, end
